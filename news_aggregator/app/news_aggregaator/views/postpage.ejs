<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post Page - Clean & Light</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: #fafbfc;
            color: #2c3e50;
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Post Container */
        .post-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
            margin-bottom: 25px;
            overflow: hidden;
            border: 1px solid #e8ecef;
        }

        /* Post Header */
        .post-header {
            padding: 25px 30px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .author-section {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 15px;
        }

        .author-avatar {
            width: 45px;
            height: 45px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .author-info {
            flex: 1;
        }

        .author-name {
            font-weight: 500;
            font-size: 15px;
            margin-bottom: 3px;
        }

        .post-time {
            font-size: 13px;
            opacity: 0.8;
        }

        .post-title {
            font-size: 24px;
            font-weight: 600;
            line-height: 1.4;
            margin: 0;
        }

        /* Post Content */
        .post-content {
            padding: 30px;
        }

        .post-body {
            font-size: 16px;
            line-height: 1.7;
            color: #4a5568;
            margin-bottom: 25px;
        }

        .post-body p {
            margin-bottom: 15px;
        }

        .post-link {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
            padding: 10px 18px;
            background: #f7faff;
            border: 1px solid #e3f2fd;
            border-radius: 8px;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .post-link:hover {
            background: #e3f2fd;
            transform: translateY(-1px);
        }

        /* Post Actions */
        .post-actions {
            padding: 20px 30px;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 15px;
        }

        .vote-buttons {
            display: flex;
            gap: 10px;
        }

        .vote-btn {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 8px 16px;
            border: 1px solid #dee2e6;
            background: white;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            color: #495057;
        }

        .vote-btn:hover {
            background: #f8f9fa;
            transform: translateY(-1px);
        }

        .vote-btn.upvoted {
            background: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }

        .vote-btn.downvoted {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }

        .vote-stats {
            display: flex;
            align-items: center;
            gap: 15px;
            color: #6c757d;
            font-size: 14px;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        /* Comments Section */
        .comments-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
            border: 1px solid #e8ecef;
            overflow: hidden;
        }

        .comments-header {
            padding: 20px 30px;
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            border-bottom: 1px solid #e9ecef;
        }

        .comments-title {
            font-size: 20px;
            font-weight: 600;
            color: #2c3e50;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* Comment Form */
        .comment-form {
            padding: 25px 30px;
            background: #fafbfc;
            border-bottom: 1px solid #e9ecef;
        }

        .comment-input {
            width: 100%;
            min-height: 100px;
            padding: 15px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            font-family: inherit;
            font-size: 14px;
            resize: vertical;
            background: white;
            transition: all 0.2s ease;
        }

        .comment-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .comment-submit-btn {
            margin-top: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
        }

        .comment-submit-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        /* Individual Comments */
        .comment {
            padding: 25px 30px;
            border-bottom: 1px solid #f1f3f4;
        }

        .comment:last-child {
            border-bottom: none;
        }

        .comment-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
        }

        .comment-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 14px;
            color: #8b4513;
        }

        .comment-user {
            font-weight: 500;
            color: #2c3e50;
            font-size: 15px;
        }

        .comment-time {
            color: #6c757d;
            font-size: 12px;
        }

        .comment-text {
            color: #4a5568;
            line-height: 1.6;
            margin-bottom: 15px;
            font-size: 15px;
        }

        .comment-footer {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .comment-btn {
            display: flex;
            align-items: center;
            gap: 4px;
            padding: 5px 10px;
            border: none;
            background: transparent;
            color: #6c757d;
            font-size: 13px;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .comment-btn:hover {
            background: #f8f9fa;
            color: #495057;
        }

        /* Nested Comments */
        .replies-container {
            margin-left: 40px;
            margin-top: 20px;
            border-left: 3px solid #e9ecef;
            padding-left: 20px;
        }

        .reply-form {
            margin-top: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            display: none;
        }

        .reply-textarea {
            width: 100%;
            min-height: 80px;
            padding: 12px;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            font-family: inherit;
            font-size: 13px;
            resize: vertical;
            background: white;
        }

        .post-reply-btn {
            margin-top: 10px;
            background: #667eea;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 13px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .post-reply-btn:hover {
            background: #5a6fd8;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .post-header,
            .post-content,
            .post-actions,
            .comment-form,
            .comment {
                padding-left: 20px;
                padding-right: 20px;
            }

            .post-title {
                font-size: 20px;
            }

            .post-actions {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }

            .vote-buttons {
                order: 2;
            }

            .vote-stats {
                order: 1;
            }

            .replies-container {
                margin-left: 20px;
                padding-left: 15px;
            }
        }

        @media (max-width: 480px) {
            .post-header {
                padding: 20px 15px;
            }

            .post-content,
            .comment-form,
            .comment {
                padding: 20px 15px;
            }

            .post-actions {
                padding: 15px;
            }

            .vote-buttons {
                width: 100%;
                justify-content: center;
            }

            .replies-container {
                margin-left: 10px;
                padding-left: 10px;
            }
        }

        /* Loading State */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Animations */
        .fade-in {
            animation: fadeIn 0.4s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(15px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <%- include('navbar.ejs') %>
    <div class="container">
        <!-- Main Post -->
        <article class="post-container">
            <header class="post-header">
                <div class="author-section">
                    <div class="author-avatar"><%= user.name.charAt(0).toUpperCase() %></div>
                    <div class="author-info">
                        <div class="author-name">Posted by: <%= user.name %></div>
                        <div class="post-time">2 hours ago</div>
                    </div>
                </div>
                <h1 class="post-title"><%= post.title %></h1>
            </header>

            <div class="post-content">
                <div class="post-body">
                    <p><%= post.content %></p>
                </div>
                
                <% if (post.link) { %>
                <a href="<%= post.link %>" class="post-link" target="_blank">
                    <i class="fas fa-external-link-alt"></i>
                    Read Full Article
                </a>
                <% } %>
            </div>

            <footer class="post-actions">
                <div class="vote-buttons">
                    <button class="vote-btn upvote-btn" onclick="castVote(1)">
                        <i class="fas fa-arrow-up"></i>
                        Upvote
                    </button>
                    <button class="vote-btn downvote-btn" onclick="castVote(-1)">
                        <i class="fas fa-arrow-down"></i>
                        Downvote
                    </button>
                </div>
                <div class="vote-stats">
                    <div class="stat-item">
                        <i class="fas fa-arrow-up" style="color: #28a745;"></i>
                        <span id="upvoteCount"><%= post.upvote %></span>
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-arrow-down" style="color: #dc3545;"></i>
                        <span id="downvoteCount"><%= post.downvote %></span>
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-comment" style="color: #667eea;"></i>
                        <span id="commentCount"><%= post.noofreplies %></span> Comments
                    </div>
                </div>
            </footer>
        </article>

        <!-- Comments Section -->
        <section class="comments-section">
            <header class="comments-header">
                <h2 class="comments-title">
                    <i class="fas fa-comments"></i>
                    Join the Discussion
                </h2>
            </header>

            <!-- Add Comment Form -->
            <div class="comment-form">
                <textarea 
                    id="reply-textarea" 
                    class="comment-input" 
                    placeholder="What are your thoughts? Share your opinion..."
                ></textarea>
                <button class="comment-submit-btn" onclick="sendReply()">
                    <i class="fas fa-paper-plane"></i>
                    Post Comment
                </button>
            </div>

            <!-- Comments List -->
            <div id="comments-container">
                <!-- Comments will be dynamically loaded here -->
            </div>
        </section>
    </div>

    <script>
        const postId = "<%= post._id %>";
        
        // Vote casting function
        function castVote(voteType) {
            console.log('Casting vote:', voteType);
            
            const upvoteBtn = document.querySelector('.upvote-btn');
            const downvoteBtn = document.querySelector('.downvote-btn');
            
            // Add loading state
            upvoteBtn.classList.add('loading');
            downvoteBtn.classList.add('loading');
            
            const requestOptions = {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ vote: voteType }),
            };
            
            fetch("/home/post/vote/" + postId, requestOptions)
                .then((response) => response.json())
                .then((data) => {
                    const value = data.response;
                    const upvoteCount = data.uc;
                    const downvoteCount = data.dc;

                    // Update vote counts in the UI
                    document.getElementById("upvoteCount").innerText = upvoteCount;
                    document.getElementById("downvoteCount").innerText = downvoteCount;

                    // Reset states
                    upvoteBtn.classList.remove('upvoted', 'loading');
                    downvoteBtn.classList.remove('downvoted', 'loading');
                    
                    // Update button states based on the received value
                    if (value === 1) {
                        upvoteBtn.classList.add('upvoted');
                        upvoteBtn.innerHTML = '<i class="fas fa-arrow-up"></i> Upvoted';
                        downvoteBtn.innerHTML = '<i class="fas fa-arrow-down"></i> Downvote';
                    } else if (value === -1) {
                        downvoteBtn.classList.add('downvoted');
                        downvoteBtn.innerHTML = '<i class="fas fa-arrow-down"></i> Downvoted';
                        upvoteBtn.innerHTML = '<i class="fas fa-arrow-up"></i> Upvote';
                    } else {
                        upvoteBtn.innerHTML = '<i class="fas fa-arrow-up"></i> Upvote';
                        downvoteBtn.innerHTML = '<i class="fas fa-arrow-down"></i> Downvote';
                    }
                })
                .catch((error) => {
                    console.error("Error:", error);
                    // Remove loading state on error
                    upvoteBtn.classList.remove('loading');
                    downvoteBtn.classList.remove('loading');
                });
        }

        // Send reply function
        function sendReply() {
            const textarea = document.getElementById('reply-textarea');
            const content = textarea.value.trim();
            
            if (!content) {
                alert('Please enter your comment');
                return;
            }
            
            const submitBtn = document.querySelector('.comment-submit-btn');
            const originalHTML = submitBtn.innerHTML;
            submitBtn.classList.add('loading');
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Posting...';
            
            fetch("/post/CreateComment/" + postId, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ comment: content }),
            })
            .then((response) => response.json())
            .then((data) => {
                // Clear textarea
                textarea.value = '';
                
                // Reload comments
                generateComments("comments-container", 0, null);
                
                // Update comment count
                const commentCount = document.getElementById('commentCount');
                commentCount.textContent = parseInt(commentCount.textContent) + 1;
                
                // Reset button
                submitBtn.classList.remove('loading');
                submitBtn.innerHTML = originalHTML;
            })
            .catch((error) => {
                console.error("Error sending reply:", error);
                submitBtn.classList.remove('loading');
                submitBtn.innerHTML = originalHTML;
            });
        }

        // Generate comments function
        function generateComments(parentId, depth, id) {
            const newUrl = window.location.origin;
            let url;

            if (id) {
                url = newUrl + "/post/comments/" + id;
            } else {
                url = newUrl + "/post/ShowComment/" + postId;
            }

            fetch(url)
                .then((response) => response.json())
                .then((posts) => {
                    const p = posts.replies;
                    const commentsContainer = document.getElementById(parentId);
                    
                    // Clear existing comments if this is the main container
                    if (parentId === "comments-container") {
                        commentsContainer.innerHTML = '';
                    }

                    for (let i = 0; i < p.length; i++) {
                        let commentId = `${p[i]._id}`;
                        let replyFormId = `reply-form-${commentId}`;
                        let repliesContainerId = `replies-${commentId}`;

                        let comment = document.createElement("div");
                        comment.className = "comment";
                        comment.id = commentId;
                        
                        // Get user initials
                        const userInitials = p[i].username ? p[i].username.charAt(0).toUpperCase() : 'U';
                        
                        comment.innerHTML = `
                            <div class="comment-header">
                                <div class="comment-avatar">${userInitials}</div>
                                <div>
                                    <div class="comment-user">${p[i].username || 'Anonymous'}</div>
                                    <div class="comment-time">Recently</div>
                                </div>
                            </div>
                            <div class="comment-text">${p[i].content}</div>
                            <div class="comment-footer">
                                <button class="comment-btn" onclick="vote(1,'${p[i]._id}')">
                                    <i class="fas fa-thumbs-up"></i>
                                    <span class="upvote-count">${p[i].upvote}</span>
                                </button>
                                <button class="comment-btn" onclick="vote(-1,'${p[i]._id}')">
                                    <i class="fas fa-thumbs-down"></i>
                                    <span class="downvote-count">${p[i].downvote}</span>
                                </button>
                                <button class="comment-btn" onclick="toggleReplyForm('${replyFormId}')">
                                    <i class="fas fa-reply"></i>
                                    Reply
                                </button>
                                <button class="comment-btn" onclick="toggleReplies('${repliesContainerId}')">
                                    <i class="fas fa-comments"></i>
                                    View Replies (${p[i].noofreplies})
                                </button>
                            </div>
                            <div class="reply-form" id="${replyFormId}">
                                <textarea class="reply-textarea" placeholder="Write your reply..."></textarea>
                                <button class="post-reply-btn" onclick="postReply('${replyFormId}', '${commentId}')">Post Reply</button>
                            </div>
                            <div class="replies-container" id="${repliesContainerId}" style="display: none;"></div>
                        `;

                        commentsContainer.appendChild(comment);

                        // Recursively generate replies
                        generateComments(repliesContainerId, depth + 1, p[i]._id);
                    }
                })
                .catch((error) => console.error("Error fetching comments:", error));
        }

        // Vote on comment function
        function vote(action, commentId) {
            fetch(`/comments/vote/${commentId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ vote: action }),
            })
            .then((response) => response.json())
            .then((data) => {
                updateVoteCounts(commentId, data.uc, data.dc);
            })
            .catch((error) => {
                console.error("Error:", error);
            });
        }

        function updateVoteCounts(commentId, upvotes, downvotes) {
            const commentElement = document.getElementById(commentId);
            if (commentElement) {
                const upvoteCount = commentElement.querySelector(".upvote-count");
                const downvoteCount = commentElement.querySelector(".downvote-count");
                if (upvoteCount) upvoteCount.textContent = upvotes;
                if (downvoteCount) downvoteCount.textContent = downvotes;
            }
        }

        function toggleReplyForm(formId) {
            const replyForm = document.getElementById(formId);
            if (replyForm) {
                replyForm.style.display = replyForm.style.display === "none" ? "block" : "none";
            }
        }

        function toggleReplies(repliesId) {
            const repliesContainer = document.getElementById(repliesId);
            if (repliesContainer) {
                repliesContainer.style.display = repliesContainer.style.display === "none" ? "block" : "none";
            }
        }

        function postReply(replyFormId, commentId) {
            const replyForm = document.getElementById(replyFormId);
            const replyTextArea = replyForm.querySelector(".reply-textarea");
            const replyContent = replyTextArea.value.trim();

            if (!replyContent) {
                alert('Please enter your reply');
                return;
            }

            const url = window.location.origin;
            
            fetch(url + "/comments/replytocomment/" + commentId, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ comment: replyContent }),
            })
            .then((response) => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error("Network response was not ok.");
            })
            .then((data) => {
                console.log("Reply posted:", data);
                
                // Clear the textarea
                replyTextArea.value = "";
                
                // Hide the reply form
                replyForm.style.display = "none";
                
                // Refresh the replies for this comment
                const repliesContainerId = `replies-${commentId}`;
                generateComments(repliesContainerId, 1, commentId);
            })
            .catch((error) => {
                console.error("Error posting reply:", error);
            });
        }

        // Auto-resize textareas
        document.addEventListener('input', function(e) {
            if (e.target.matches('.comment-input, .reply-textarea')) {
                e.target.style.height = 'auto';
                e.target.style.height = e.target.scrollHeight + 'px';
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'Enter') {
                if (e.target.id === 'reply-textarea') {
                    sendReply();
                }
            }
        });

        // Initialize comments on page load
        document.addEventListener('DOMContentLoaded', function() {
            generateComments("comments-container", 0, null);
        });
    </script>
</body>
</html>